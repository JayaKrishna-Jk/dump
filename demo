from ssrai.oauth import retrieve_token

token_url = "https://api-uat.statestr.com/oauth/token"
params = {
    "grant_type": "client_credentials",
    "client_id": rai_client_id,
    "client_secret": eam_consumer_secret
}

try:
    token = retrieve_token(rai_client_id, eam_consumer_secret, token_url, params, {})
    print("Token retrieved successfully:", token)
except ValueError as e:
    print("Token retrieval failed:", e)


import javax.swing.*;
import java.awt.*;

public class EmailPreview {
    public static void main(String[] args) {
        // Simulated email body (same as your email)
        String body = "Hello,<br><br>Please find attached Batch Policing Consolidated Exception Report.<br><br>Thanks and Regards,<br>SCF IT TEST";

        // Simulated HTML table (same as your email content)
        String htmlContent = "<!DOCTYPE html><html><head><title>Test Email</title></head><body>"
                + "<table border='1' style='border-collapse: collapse; width: 50%; text-align: center;'>"
                + "<tr><th>Column 1</th><th>Column 2</th></tr>"
                + "<tr><td>Data 1</td><td>Data 2</td></tr>"
                + "<tr><td>Data 3</td><td>Data 4</td></tr>"
                + "</table></body></html>";

        // Combine Body + HTML
        String fullContent = body + "<br><br>" + htmlContent;

        // Create a Swing UI to display the HTML
        JFrame frame = new JFrame("Email Preview");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JEditorPane editorPane = new JEditorPane("text/html", fullContent);
        editorPane.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(editorPane);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }
}



public class BatchPolicingHtmlGenerator {

    public static String generateHtml(
        BatchPolicingReport summaryReport,
        List<BatchPolicingReport> reports,
        String dateTime,
        BatchPolicingUtils utils,
        Dictionary<String, String> inputFilesDict
    ) {
        StringBuilder htmlBuilder = new StringBuilder();

        // HTML Structure and CSS Styling
        htmlBuilder.append("<!DOCTYPE html><html lang='en'><head>");
        htmlBuilder.append("<meta charset='UTF-8'>");
        htmlBuilder.append("<title>").append(BatchPolicingConstants.SUMMARY_HEADING_PART1)
                   .append(" Exception Report</title>");
        htmlBuilder.append("<style>");
        htmlBuilder.append("table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }");
        htmlBuilder.append("th, td { border: 1px solid #888; padding: 8px; text-align: center; }");
        htmlBuilder.append("th { background-color: #BFBFBF; white-space: nowrap; }");  // Auto-adjust header width
        htmlBuilder.append("</style></head><body>");

        String fullHeader = BatchPolicingConstants.SUMMARY_HEADING_PART1 + dateTime + BatchPolicingConstants.SUMMARY_HEADING_PART2;
        htmlBuilder.append("<table><tr><td colspan='4' style='text-align: center; font-weight: bold; background-color: #BFBFBF;'>")
                   .append(fullHeader).append("</td></tr>");

        // Table Header with nowrap styling
        htmlBuilder.append("<tr>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER0).append("</th>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER1).append("</th>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER2).append("</th>");
        htmlBuilder.append("<th style='width: 50px;'>").append(BatchPolicingConstants.HEADER3).append("</th>"); // Fixed width for symbol
        htmlBuilder.append("</tr>");

        // Populating Table Data
        for (BatchPolicingReport message : summaryReport.getMessages()) {
            MessageType msgType = message.getMsgType();
            String messageData = message.getData();

            htmlBuilder.append("<tr>");

            if (msgType.equals(MessageType.ERROR_SYMBOL) || msgType.equals(MessageType.WARN_SYMBOL)) {
                setHtmlSymbolAndDescription(htmlBuilder, msgType, messageData, inputFilesDict);
            } else if (msgType.equals(MessageType.SUMMARY)) {
                htmlBuilder.append("<td></td>");
                htmlBuilder.append("<td style='font-weight: bold;'>").append(messageData).append("</td>");
                htmlBuilder.append("<td></td><td></td>");
            }
            htmlBuilder.append("</tr>");
        }

        // Footer Row
        htmlBuilder.append("<tr><td></td><td style='font-weight: bold; background-color: #BFBFBF;'>")
                   .append(BatchPolicingConstants.TOTAL_FILES_PROCESSED)
                   .append(reports.size() - 1)
                   .append("</td><td></td><td></td></tr>");

        // Closing Tags
        htmlBuilder.append("</table></body></html>");

        return htmlBuilder.toString();
    }

    public static void setHtmlSymbolAndDescription(
        StringBuilder htmlBuilder,
        MessageType msgType,
        String messageData,
        Dictionary<String, String> inputFilesDict
    ) {
        String symbol;
        String exceptionColor;

        if (msgType.equals(MessageType.ERROR_SYMBOL)) {
            exceptionColor = "red";
            symbol = "&#10060;";
        } else if (msgType.equals(MessageType.WARN_SYMBOL)) {
            exceptionColor = "orange";
            symbol = "<span style='color: rgb(235,134,52); font-family: Segoe UI Emoji;'>&#9888;</span>";
        } else {
            exceptionColor = "green";
            symbol = "&#x2705;";
        }

        String baseName = messageData.substring(1, messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD));
        String extension = messageData.substring(messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD));
        String description = inputFilesDict.get(baseName + extension);
        String[] parts = description.split(LIQConstants.TILDE);

        String reportName = parts[0];
        String fileDescription = parts[1];

        htmlBuilder.append("<td>").append(reportName).append("</td>");
        htmlBuilder.append("<td>").append(messageData.substring(1)).append("</td>");
        htmlBuilder.append("<td style='width: 50px; color: ").append(exceptionColor).append(";'>").append(symbol).append("</td>");
        htmlBuilder.append("<td>").append(fileDescription).append("</td>");
    }
}




public class BatchPolicingHtmlGenerator {

    public static String generateHtml(BatchPolicingReport summaryReport, List<BatchPolicingReport> reports, String dateTime, BatchPolicingUtils utils, Dictionary<String, String> inputFilesDict) {

        StringBuilder htmlBuilder = new StringBuilder();

        // HTML Structure and CSS Styling
        htmlBuilder.append("<!DOCTYPE html>")
                .append("<html lang='en'>")
                .append("<head>")
                .append("<meta charset='UTF-8'>")
                .append("<title>").append(BatchPolicingConstants.SUMMARY_HEADING_PART1)
                .append(" Exception Report</title>")
                .append("<style>")
                .append("table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }")
                .append("th, td { border: 1px solid #888; padding: 8px; text-align: center; }")
                .append("th { background-color: #BFBFBF; }")
                .append(".header { background-color: #BFBFBF; color: black; font-weight: bold; }")
                .append(".error { color: red; font-weight: bold; }")
                .append(".warning { color: orange; font-weight: bold; }")
                .append(".centered { text-align: center; font-weight: bold; background-color: #BFBFBF; color: black; }")
                .append(".footer { background-color: #BFBFBF; color: black; font-weight: bold; }")
                .append("</style>")
                .append("</head>")
                .append("<body>");

        String fullHeader = BatchPolicingConstants.SUMMARY_HEADING_PART1 + dateTime + BatchPolicingConstants.SUMMARY_HEADING_PART2;

        htmlBuilder.append("<table>")
                .append("<tr><td class='centered' colspan='4'>").append(fullHeader).append("</td></tr>");

        // Table Header
        htmlBuilder.append("<tr class='header'>")
                .append("<th>").append(BatchPolicingConstants.HEADER0).append("</th>")
                .append("<th>").append(BatchPolicingConstants.HEADER1).append("</th>")
                .append("<th>").append(BatchPolicingConstants.HEADER2).append("</th>")
                .append("<th>").append(BatchPolicingConstants.HEADER3).append("</th>")
                .append("</tr>");

        // Populating Table Data
        for (BatchPolicingReport message : summaryReport.getMessages()) {
            MessageType msgType = message.getMsgType();
            String messageData = message.getData();

            if (msgType.equals(MessageType.ERROR_SYMBOL) || msgType.equals(MessageType.WARN_SYMBOL)) {
                htmlBuilder.append("<tr>");
                setHtmlSymbolAndDescription(htmlBuilder, msgType, messageData, inputFilesDict);
                htmlBuilder.append("</tr>");
            }
        }

        // Footer with total processed files
        htmlBuilder.append("<tr><td></td><td class='footer'>")
                .append(BatchPolicingConstants.TOTAL_FILES_PROCESSED)
                .append(reports.size() - 1)
                .append("</td><td></td><td></td></tr>");

        // Closing Tags
        htmlBuilder.append("</table>")
                .append("</body>")
                .append("</html>");

        return htmlBuilder.toString();
    }

    public static void setHtmlSymbolAndDescription(StringBuilder htmlBuilder, MessageType msgType, String messageData, Dictionary<String, String> inputFilesDict) {

        String symbol;
        String exceptionClass = "no-issue";

        if (msgType.equals(MessageType.ERROR_SYMBOL)) {
            exceptionClass = "error";
            symbol = "&#10060;";
        } else if (msgType.equals(MessageType.WARN_SYMBOL)) {
            exceptionClass = "warning";
            symbol = "<span style=\"color: rgb(235,134,52); font-family: 'Segoe UI Emoji';\">&#9888;</span>";
        } else {
            symbol = "&#x2705;";
        }

        // Extracting file name and description
        String baseName = messageData.substring(1, messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD));
        String extension = messageData.substring(messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD));
        String description = inputFilesDict.get(baseName + extension);

        String[] parts = description.split(LIQConstants.TILDE);
        String reportName = parts[0];
        String fileDescription = parts[1];

        htmlBuilder.append("<td style='white-space: nowrap;'>").append(reportName).append("</td>")  // Auto-adjust width
                .append("<td style='white-space: nowrap;'>").append(messageData.substring(1)).append("</td>") // Auto-adjust width
                .append("<td>").append(symbol).append("</td>")  // Keep symbol column fixed
                .append("<td style='white-space: nowrap;'>").append(fileDescription).append("</td>"); // Auto-adjust width
    }
}


Thanks for the clarification! Since **Prod uses `E8ds_v4`**, let's break it down and find the best **Pre-Dev alternative**.  

---

### **1. Understanding `E8ds_v4` (Prod VM)**
`E8ds_v4` belongs to the **E-Series**, optimized for **memory-intensive workloads**.  
- **8 vCPUs**  
- **64 GB RAM**  
- **Supports Premium SSDs**  
- **High memory-to-core ratio (8:1)**
- **Best for**: SQL databases, in-memory processing, SAP  

Since **Pre-Dev doesn't need as much memory**, we should find a cost-effective alternative.  

---

### **2. Best Pre-Dev Alternatives**  

| **Prod VM (`E8ds_v4`)** | **Possible Pre-Dev Alternative** | **Reason** |
|-----------------|----------------------|------------|
| `E8ds_v4` | `D8ds_v4` | Balanced compute/memory, lower cost |
| `E8ds_v4` | `B8ms` | Budget-friendly, good for testing |
| `E8ds_v4` | `D4ds_v4` | If Pre-Dev can run with 4 vCPUs instead of 8 |

#### **Why these alternatives?**
1. **D-Series (`D8ds_v4`)**  
   - Balanced CPU and RAM (8 vCPU, **32 GB RAM** instead of 64 GB).  
   - Cheaper than E-Series but still powerful.  
   - Good for general-purpose workloads.  
   
2. **B-Series (`B8ms`)**  
   - Cost-efficient, ideal for **development and testing**.  
   - **8 vCPUs, 32 GB RAM**, but allows CPU bursting when needed.  

3. **D4ds_v4 (Half-size Option)**  
   - If Pre-Dev can work with **4 vCPUs and 16 GB RAM**, this is even cheaper.  

---

### **3. Questions to Ask Before Finalizing Pre-Dev VM Size**
- **Do we need the same memory-intensive setup as Prod?**  
  - If yes → `E8ds_v4`.  
  - If no → `D8ds_v4` or `B8ms`.  
- **Will we run database queries or just basic testing?**  
  - **Database-heavy testing** → `D8ds_v4`.  
  - **Basic app testing** → `B8ms` or `D4ds_v4`.  
- **How important is cost savings in Pre-Dev?**  
  - If budget is tight, `B8ms` is a solid choice.  

---

### **4. Next Steps**
- **Confirm workload requirements** with your lead.  
- **Choose between D-Series (balanced) and B-Series (cost-saving).**  
- **Ensure enough resources** for any database testing.  

Would you like help comparing the pricing or detailed performance metrics for these options?






### **Understanding Azure VM Sizing and Series**  

When creating a Virtual Machine (VM) in Azure, selecting the right size is crucial for balancing **performance, cost, and scalability**. The VM **size** determines how much **CPU, RAM, storage, and network bandwidth** your VM will have.  

Azure provides **multiple VM series**, each optimized for different workloads. The `E4ds_v4` VM size used in **Prod** is from the **E-series**, which is optimized for memory-intensive applications. For **Pre-Dev**, we can choose a different series based on requirements.

---

## **1. VM Size Selection in Azure Portal: Columns and Their Meaning**  

| Column Name      | Description |
|-----------------|-------------|
| **SKU (Stock Keeping Unit)** | The unique identifier for the VM size, e.g., `E4ds_v4`. |
| **vCPU (Virtual CPU)** | The number of virtual processors assigned to the VM. |
| **RAM (Memory)** | The amount of memory (in GB) available in the VM. |
| **Data Disks** | The maximum number of data disks the VM supports. |
| **Max IOPS (Input/Output Operations per Second)** | Maximum disk performance capability for high-speed storage. |
| **Temporary Storage (SSD)** | The local SSD storage for temporary files (gets wiped on VM restart). |
| **Accelerated Networking** | Improves networking performance and reduces CPU usage. |
| **Max NICs (Network Interfaces)** | Maximum number of network interfaces that can be attached to the VM. |

---

## **2. Azure VM Series and Use Cases**  

### **A-Series (Entry-Level)**
- **Use Case:** Small applications, development, and testing.
- **Example:** `A2_v2`, `A4_v2`
- **Alternative for Pre-Dev?** ✅ Yes, if low-cost, lightweight VMs are needed.

### **B-Series (Burstable)**
- **Use Case:** Workloads with low CPU usage but occasional bursts (e.g., web servers, microservices).
- **Example:** `B2s`, `B4ms`
- **Alternative for Pre-Dev?** ✅ Yes, for cost-efficient VMs with occasional high-performance needs.

### **D-Series (General Purpose)**
- **Use Case:** Balanced CPU, memory, and disk for general workloads (web apps, databases).
- **Example:** `D4ds_v4`, `D8s_v5`
- **Alternative for Pre-Dev?** ✅ Yes, if a balance of CPU and memory is required.

### **E-Series (Memory Optimized)**
- **Use Case:** Memory-intensive applications like **SAP, SQL databases, in-memory caching**.
- **Example:** `E4ds_v4`, `E8s_v5`
- **Alternative for Pre-Dev?** ❌ Probably **not needed** unless working with memory-heavy workloads.

### **F-Series (Compute Optimized)**
- **Use Case:** High CPU-to-memory ratio for batch processing, game servers.
- **Example:** `F4s_v2`, `F16s_v2`
- **Alternative for Pre-Dev?** ❌ No, unless you are running CPU-heavy computations.

### **M-Series (Large Memory)**
- **Use Case:** Extremely memory-intensive applications like **SAP HANA**.
- **Example:** `M16ms`, `M32ms`
- **Alternative for Pre-Dev?** ❌ No, since it's expensive and used for enterprise databases.

### **L-Series (Storage Optimized)**
- **Use Case:** Workloads needing high disk throughput, like **big data, NoSQL databases**.
- **Example:** `L8s_v2`, `L16s_v3`
- **Alternative for Pre-Dev?** ❌ No, unless working with high-speed data processing.

### **N-Series (GPU Optimized)**
- **Use Case:** Machine Learning (ML), AI, and **video rendering**.
- **Example:** `NC6s_v3`, `ND40s_v4`
- **Alternative for Pre-Dev?** ❌ No, unless GPU is needed.

---

## **3. What Can You Use in Pre-Dev Instead of E-Series?**  

Since **E4ds_v4** is memory-optimized and used in **Prod**, for **Pre-Dev**, we should pick a cheaper alternative:

| **Prod VM Size (E-Series)** | **Possible Pre-Dev Alternative** | **Reason** |
|----------------|----------------------|------------|
| `E4ds_v4` | `D4ds_v4` | General purpose, balanced CPU & memory |
| `E8s_v5` | `B4ms` | Lower-cost, good for testing |
| `E16s_v5` | `D8s_v5` | Good alternative with lower cost |

---

## **4. Key Considerations for Choosing a Pre-Dev VM Size**
1. **What are you testing?**  
   - If it's a **web app**, use `D-Series` or `B-Series`.  
   - If you need **bursting capability**, go for `B-Series`.  
   - If it's a **database test**, `D-Series` is better.  

2. **Cost vs. Performance**  
   - `E-Series` is expensive but needed for **high-memory** workloads.  
   - `D-Series` is a **cost-effective alternative** for most dev/test needs.  

3. **Future Scalability**  
   - Use **Autoscaling** if needed.  
   - Choose **reserved instances** in Prod for cost savings.  

---

## **5. Summary: What Should You Ask the Team?**
1. **Confirm if Pre-Dev needs a different series**  
   - Ask: *"Do we need high-memory (E-Series) for Pre-Dev, or can we use D-Series or B-Series?"*

2. **Clarify Workload Needs**  
   - Ask: *"What type of workloads will we run in Pre-Dev (web app, database, batch jobs)?"*  

3. **Performance vs. Cost**  
   - Ask: *"Should we prioritize cost savings in Pre-Dev, or mirror Prod specs?"*  

4. **Storage and Network Considerations**  
   - Ask: *"What disk types and network bandwidth are required?"*  

---

### **Next Steps**
- If you're setting up **Pre-Dev**, I recommend starting with a **D-Series or B-Series VM**.
- Once requirements are clear, we can fine-tune based on workload needs.

Would you like me to help compare specific sizes based on your workload?




try {
    BatchPolicingReader reader = new BatchPolicingReader();
    reader.readFiles(impl, folderPath, matchedFiles, summary, errorKeywords, warnKeywords);
    List<BatchPolicingReport> reports = reader.getReports();

    String dateTime = LIQUtility.getCurrentDate(BatchPolicingConstants.GENERIC_DT_FORMAT);
    String htmlContent = BatchPolicingHtmlGenerator.generateHtml(summary, reports.size(), dateTime, utils);

    // Save the HTML content to a specified file path
    String filePath = "C:\\Users\\YourUsername\\Documents\\BatchPolicingSummary.html";
    BatchPolicingHtmlSaver.saveHtmlToFile(htmlContent, filePath, impl);

    XSSFWorkbook workbook = BatchPolicingWriter.writeData(impl, outputPath, reports, saveReport, inputFilesDict, utils);

    BatchPolicingMailService mailServiceObj = new BatchPolicingMailService();
    mailServiceObj.sendMail(impl, workbook, utils, summary, reports, inputFilesDict);
    impl.endWithReturnCode(FileUtilConstants.FULL_SUCCESS);

} catch (Exception e) {
    impl.logError("Exception occurred while processing: " + e.getMessage());
}



public class BatchPolicingHtmlSaver {

    public static void saveHtmlToFile(String htmlContent, String fileName, BatchPolicingLogger impl) {
        try (PrintWriter writer = new PrintWriter(fileName, "UTF-8")) {
            writer.println(htmlContent);
            impl.logInfo("HTML content successfully saved to: " + fileName);
        } catch (IOException e) {
            impl.logError("Error while saving HTML content: " + e.getMessage());
        }
    }
}





import org.apache.poi.xwpf.usermodel.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Dictionary;

public class BatchPolicingHtmlToDocGenerator {

    public static void generateHtmlDocument(BatchPolicingSummary summaryReport, int totReportsCount, 
                                            String dateTime, BatchPolicingUtils utils, Dictionary<String, String> inputFilesDict) {
        try {
            // Generate HTML content using the existing method
            String htmlContent = BatchPolicingHtmlGenerator.generateHtml(summaryReport, totReportsCount, dateTime, utils);

            // Create a new Word document
            XWPFDocument document = new XWPFDocument();
            XWPFParagraph paragraph = document.createParagraph();
            XWPFRun run = paragraph.createRun();
            run.setText(htmlContent);
            run.setFontFamily("Courier New");
            run.setFontSize(10);

            // Save the Word document
            String filePath = "BatchPolicingSummary.docx";
            try (FileOutputStream out = new FileOutputStream(filePath)) {
                document.write(out);
                out.close();
                System.out.println("HTML content successfully written to: " + filePath);
            }

            document.close();
        } catch (IOException e) {
            System.err.println("Error while writing HTML to Word document: " + e.getMessage());
        }
    }
}





// Populating Table Data
for (BatchPolicingReport message : summary.getMessages()) {
    MessageType msgType = message.getMsgType();
    String messageData = message.getData();
    htmlBuilder.append("<tr>");

    if (!msgType.equals(MessageType.SUMMARY)) {
        // Use the new method to set symbol and description
        setSymbolAndDescription(htmlBuilder, msgType, messageData, inputFilesDict);
    } else {
        // Handle summary type separately
        htmlBuilder.append("<td colspan='4'>").append(messageData).append("</td>");
    }

    htmlBuilder.append("</tr>");
}



private static void setSymbolAndDescription(StringBuilder htmlBuilder, MessageType msgType, String messageData, Dictionary<String, String> inputFilesDict) {
    String symbol = msgType.getSymbol();
    String exceptionClass = "no-issue";
    if (msgType.equals(MessageType.ERROR)) {
        exceptionClass = "error";
    } else if (msgType.equals(MessageType.WARNING)) {
        exceptionClass = "warning";
    }

    // Extracting report name and description
    String baseName = messageData.substring(1, messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD) - 1);
    String extension = messageData.substring(messageData.lastIndexOf(BatchPolicingConstants.STR_PERIOD));
    String description = inputFilesDict.get(baseName + extension);

    // Fallback if description is missing or not found
    String reportName = "Unknown Report";
    String fileDescription = "No Description Available";

    if (description != null && !description.isEmpty()) {
        String[] parts = description.split(LIQConstants.TILDE);
        if (parts.length >= 2) {
            reportName = parts[0];
            fileDescription = parts[1];
        } else if (parts.length == 1) {
            reportName = parts[0];
        }
    }

    // Setting Report Name
    htmlBuilder.append("<td>").append(reportName).append("</td>");

    // Setting File Name as a Hyperlink
    htmlBuilder.append("<td>").append("<a href='#'>").append(messageData.substring(1)).append("</a>").append("</td>");

    // Setting Symbol and Description
    htmlBuilder.append("<td class='").append(exceptionClass).append("'>").append(symbol).append("</td>");
    htmlBuilder.append("<td>").append(fileDescription).append("</td>");
}





public class BatchPolicingHtmlGenerator {

    public static String generateHtml(BatchPolicingSummary summaryReport, int totReportsCount, String dateTime, BatchPolicingUtils utils) {
        StringBuilder htmlBuilder = new StringBuilder();

        // HTML Structure and CSS Styling
        htmlBuilder.append("<!DOCTYPE html>");
        htmlBuilder.append("<html lang='en'>");
        htmlBuilder.append("<head>");
        htmlBuilder.append("<meta charset='UTF-8'>");
        htmlBuilder.append("<title>").append(BatchPolicingConstants.SUMMARY_HEADING_PART1).append(" Exception Report</title>");
        htmlBuilder.append("<style>");
        htmlBuilder.append("table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }");
        htmlBuilder.append("th, td { border: 1px solid #888; padding: 8px; text-align: center; }");
        htmlBuilder.append("th { background-color: ").append(BatchPolicingConstants.COLOR_LIGHT_GREY).append("; }");
        htmlBuilder.append(".header { background-color: ").append(BatchPolicingConstants.COLOR_DARK_GREEN).append("; color: white; font-weight: bold; }");
        htmlBuilder.append(".error { color: red; font-weight: bold; }");
        htmlBuilder.append(".warning { color: orange; font-weight: bold; }");
        htmlBuilder.append(".no-issue { color: green; font-weight: bold; }");
        htmlBuilder.append(".centered { text-align: center; font-weight: bold; font-size: 20px; background-color: ")
                  .append(BatchPolicingConstants.COLOR_DARK_GREEN).append("; color: white; }");
        htmlBuilder.append(".legend th, .legend td { text-align: center; font-weight: bold; }");
        htmlBuilder.append(".footer { background-color: ").append(BatchPolicingConstants.COLOR_DARK_GREEN).append("; color: white; font-weight: bold; }");
        htmlBuilder.append("</style>");
        htmlBuilder.append("</head>");
        htmlBuilder.append("<body>");

        // Report Heading
        String fullHeader = BatchPolicingConstants.SUMMARY_HEADING_PART1 + dateTime + BatchPolicingConstants.SUMMARY_HEADING_PART2;
        htmlBuilder.append("<table>");
        htmlBuilder.append("<tr><td class='centered' colspan='4'>").append(fullHeader).append("</td></tr>");

        // Table Header
        htmlBuilder.append("<tr class='header'>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER0).append("</th>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER1).append("</th>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER2).append("</th>");
        htmlBuilder.append("<th>").append(BatchPolicingConstants.HEADER3).append("</th>");
        htmlBuilder.append("</tr>");

        // Populating Table Data
        for (BatchPolicingReport message : summaryReport.getMessages()) {
            htmlBuilder.append("<tr>");

            // Message Data
            htmlBuilder.append("<td>").append(message.getData()).append("</td>");
            htmlBuilder.append("<td><a href='#'>").append(message.getFileName()).append("</a></td>");

            // Determine Exception Type
            String exceptionClass = "no-issue";
            String exceptionSymbol = BatchPolicingConstants.SAFE_SYMBOL;
            String exceptionNotation = BatchPolicingConstants.STR_NOEXCEPTION_LEG_NOTATION;

            if (message.getMsgType().equals(MessageType.ERROR)) {
                exceptionClass = "error";
                exceptionSymbol = BatchPolicingConstants.ERROR_SYMBOL;
                exceptionNotation = BatchPolicingConstants.STR_ERRORS_LEG_NOTATION;
            } else if (message.getMsgType().equals(MessageType.WARNING)) {
                exceptionClass = "warning";
                exceptionSymbol = BatchPolicingConstants.WARN_SYMBOL;
                exceptionNotation = BatchPolicingConstants.STR_WARNINGS_LEG_NOTATION;
            }

            htmlBuilder.append("<td class='").append(exceptionClass).append("'>").append(exceptionSymbol).append("</td>");
            htmlBuilder.append("<td>").append(exceptionNotation).append("</td>");
            htmlBuilder.append("</tr>");
        }

        // Footer - Total Files Processed
        htmlBuilder.append("<tr><td colspan='4' class='footer'>")
                  .append(BatchPolicingConstants.TOTAL_FILES_PROCESSED).append(totReportsCount).append("</td></tr>");

        // Legend Section
        htmlBuilder.append("<tr class='legend'>");
        htmlBuilder.append("<th colspan='4'>").append(BatchPolicingConstants.EXCEP_LEG_HEADER).append("</th>");
        htmlBuilder.append("</tr>");
        htmlBuilder.append("<tr>");
        htmlBuilder.append("<td>").append(BatchPolicingConstants.ERROR_SYMBOL).append("</td>");
        htmlBuilder.append("<td>").append(BatchPolicingConstants.STR_ERRORS_LEG_NOTATION).append("</td>");
        htmlBuilder.append("<td>").append(BatchPolicingConstants.WARN_SYMBOL).append("</td>");
        htmlBuilder.append("<td>").append(BatchPolicingConstants.STR_WARNINGS_LEG_NOTATION).append("</td>");
        htmlBuilder.append("</tr>");
        htmlBuilder.append("<tr>");
        htmlBuilder.append("<td>").append(BatchPolicingConstants.SAFE_SYMBOL).append("</td>");
        htmlBuilder.append("<td colspan='3'>").append(BatchPolicingConstants.STR_NOEXCEPTION_LEG_NOTATION).append("</td>");
        htmlBuilder.append("</tr>");

        // Closing Tags
        htmlBuilder.append("</table>");
        htmlBuilder.append("</body>");
        htmlBuilder.append("</html>");

        return htmlBuilder.toString();
    }
}



public class BatchPolicingHtmlGenerator {

    public static String generateHtml(BatchPolicingSummary summary, String dateTime) {
        StringBuilder htmlBuilder = new StringBuilder();

        // HTML Structure and CSS Styling
        htmlBuilder.append("<!DOCTYPE html>");
        htmlBuilder.append("<html lang='en'>");
        htmlBuilder.append("<head>");
        htmlBuilder.append("<meta charset='UTF-8'>");
        htmlBuilder.append("<title>Batch Policing Consolidated Exception Report</title>");
        htmlBuilder.append("<style>");
        htmlBuilder.append("table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }");
        htmlBuilder.append("th, td { border: 1px solid #888; padding: 8px; text-align: center; }");
        htmlBuilder.append("th { background-color: #d3d3d3; }");
        htmlBuilder.append(".header { background-color: #4f6228; color: white; font-weight: bold; }");
        htmlBuilder.append(".error { color: red; font-weight: bold; }");
        htmlBuilder.append(".warning { color: orange; font-weight: bold; }");
        htmlBuilder.append(".no-issue { color: green; font-weight: bold; }");
        htmlBuilder.append(".centered { text-align: center; font-weight: bold; font-size: 20px; background-color: #4f6228; color: white; }");
        htmlBuilder.append(".legend th, .legend td { text-align: center; font-weight: bold; }");
        htmlBuilder.append(".footer { background-color: #4f6228; color: white; font-weight: bold; }");
        htmlBuilder.append("</style>");
        htmlBuilder.append("</head>");
        htmlBuilder.append("<body>");

        // Report Heading
        htmlBuilder.append("<table>");
        htmlBuilder.append("<tr><td class='centered' colspan='4'>Batch Policing Consolidated Exception Report as of ")
                .append(dateTime).append("</td></tr>");

        // Table Header
        htmlBuilder.append("<tr class='header'>");
        htmlBuilder.append("<th>Batch Police Report</th>");
        htmlBuilder.append("<th>File Name</th>");
        htmlBuilder.append("<th>Exception</th>");
        htmlBuilder.append("<th>File Description</th>");
        htmlBuilder.append("</tr>");

        // Populating Table Data
        for (BatchPolicingReport message : summary.getMessages()) {
            htmlBuilder.append("<tr>");
            htmlBuilder.append("<td>").append(message.getData()).append("</td>");
            htmlBuilder.append("<td>").append("<a href='#'>").append(message.getFileName()).append("</a>").append("</td>");
            
            // Determine Exception Type
            String exceptionClass = "no-issue";
            String exceptionSymbol = "✔️";
            if (message.getMsgType().equals(MessageType.ERROR)) {
                exceptionClass = "error";
                exceptionSymbol = "❌";
            } else if (message.getMsgType().equals(MessageType.WARNING)) {
                exceptionClass = "warning";
                exceptionSymbol = "⚠️";
            }
            
            htmlBuilder.append("<td class='").append(exceptionClass).append("'>").append(exceptionSymbol).append("</td>");
            htmlBuilder.append("<td>").append(message.getDescription()).append("</td>");
            htmlBuilder.append("</tr>");
        }

        // Footer and Closing Tags
        htmlBuilder.append("</table>");
        htmlBuilder.append("</body>");
        htmlBuilder.append("</html>");

        return htmlBuilder.toString();
    }
}



<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <title>Batch Policing Consolidated Exception Report</title>
    <style>
        table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }
        th, td { border: 1px solid #888; padding: 8px; text-align: center; }
        th { background-color: #d3d3d3; }
        .header { background-color: #4f6228; color: white; font-weight: bold; }
        .error { color: red; font-weight: bold; }
        .warning { color: orange; font-weight: bold; }
        .no-issue { color: green; font-weight: bold; }
        .centered { text-align: center; font-weight: bold; font-size: 20px; background-color: #4f6228; color: white; }
        .legend th, .legend td { text-align: center; font-weight: bold; }
        .footer { background-color: #4f6228; color: white; font-weight: bold; }
    </style>
</head>
<body>
    <table>
        <tr>
            <td class='centered' colspan='4'>Batch Policing Consolidated Exception Report as of [DateTime]</td>
        </tr>
        <tr class='header'>
            <th>Batch Police Report</th>
            <th>File Name</th>
            <th>Exception</th>
            <th>File Description</th>
        </tr>
        <!-- Example of dynamically generated rows -->
        <tr>
            <td>Report 1</td>
            <td><a href='#'>accrual1.txt</a></td>
            <td class='error'>❌</td>
            <td>Missing data fields</td>
        </tr>
        <tr>
            <td>Report 2</td>
            <td><a href='#'>loan_details.txt</a></td>
            <td class='warning'>⚠️</td>
            <td>Inconsistent record count</td>
        </tr>
        <tr>
            <td>Report 3</td>
            <td><a href='#'>payment_report.txt</a></td>
            <td class='no-issue'>✔️</td>
            <td>No issues found</td>
        </tr>
    </table>
</body>
</html>



<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <title>Batch Policing Consolidated Exception Report</title>
    <style>
        table { width: 90%; border-collapse: collapse; margin: 20px auto; font-family: Arial, sans-serif; }
        th, td { border: 1px solid #888; padding: 8px; text-align: center; }
        th { background-color: #d3d3d3; }
        .header { background-color: #4f6228; color: white; font-weight: bold; }
        .error { color: red; font-weight: bold; }
        .warning { color: orange; font-weight: bold; }
        .no-issue { color: green; font-weight: bold; }
        .centered { text-align: center; font-weight: bold; font-size: 20px; background-color: #4f6228; color: white; }
        .legend th, .legend td { text-align: center; font-weight: bold; }
        .footer { background-color: #4f6228; color: white; font-weight: bold; }
    </style>
</head>
<body>
    <table>
        <tr>
            <td class='centered' colspan='4'>Batch Policing Consolidated Exception Report as of 2024-03-23 10:30:00</td>
        </tr>
        <tr class='header'>
            <th>Batch Police Report</th>
            <th>File Name</th>
            <th>Exception</th>
            <th>File Description</th>
        </tr>
        
        <!-- Hardcoded Example Rows -->
        <tr>
            <td>Loan Data Validation</td>
            <td><a href='#'>loan_validation.txt</a></td>
            <td class='error'>❌</td>
            <td>Missing loan records</td>
        </tr>
        <tr>
            <td>Payment Accuracy Check</td>
            <td><a href='#'>payment_report.txt</a></td>
            <td class='warning'>⚠️</td>
            <td>Minor discrepancies in payment amounts</td>
        </tr>
        <tr>
            <td>Interest Rate Report</td>
            <td><a href='#'>interest_report.txt</a></td>
            <td class='no-issue'>✔️</td>
            <td>All rates are consistent</td>
        </tr>
        <tr>
            <td>Data Completeness Check</td>
            <td><a href='#'>completeness_report.txt</a></td>
            <td class='error'>❌</td>
            <td>Incomplete data for batch ID 1023</td>
        </tr>
        <tr>
            <td>Accruals Reconciliation</td>
            <td><a href='#'>accruals.txt</a></td>
            <td class='no-issue'>✔️</td>
            <td>Reconciliation successful</td>
        </tr>
    </table>
</body>
</html>
